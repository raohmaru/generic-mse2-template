include file: utils
include file: language

############################################################## Localization
lang  := language()

############################################################## Functions & filters
## Copied and Pasted from vs.mse-game, with a few modifications
# General functions
# these are considered a correct 'word' for spellchecking in the text box:
additional_text_words := match@(match:
	"(?ix)^(?:                         # match whole word
	  <atom-[^>]*>.*?</atom-[^>]*>     # cardnames and stuff
	| [+-]?[0-9X]+ / [+-]?[0-9X]+      # '3/3', '+X/+X'
	| [+-][0-9X]+	                   # '+X'
	)$")

text_filter := 
	# step 1 : remove all automatic tags
	remove_tag@(tag: "<sym-auto>") +
	remove_tag@(tag: "<i-auto>")   +
	remove_tag@(tag: "<b-auto>")   +
	remove_tag@(tag: "<error-spelling") +
	remove_tag@(tag: "<nospellcheck") +
	# step 2 : reminder text for keywords
	expand_keywords@(
		condition: {
			correct_case or not used_placeholders
		}
		default_expand: {
			chosen(choice:if correct_case then mode else "lower case", set.automatic_reminder_text)
		},
		combine: {
			keyword  := "<nospellcheck>{keyword}</nospellcheck>"
			reminder := process_english_hints(reminder)
			keyword + if expand then "<atom-reminder-{mode}> ({reminder})</atom-reminder-{mode}>"
		}) +
	# step 2b : move action keywords' reminder text to the end of the line
	replace@(
		match: "(<atom-reminder-action>(?:(?!<kw-).)*</atom-reminder-action></kw[^>]*>)(((?!<atom-reminder| ?<kw-)[^\n(])+)",
		replace: "\\2\\1"
		) +
	# step 2c : remove duplicate reminder text
	replace@(
		match: "(<atom-reminder-[^>]*>[^)]+[)]</atom-reminder-[^>]*>)([^\n]+)\\1"
		replace: "\\2\\1"
		) +
	# step 3a : expand shortcut word CARDNAME
	replace@(
		match: "CARDNAME",
		in_context: "(^|[[:space:]]|\\()<match>", # TODO: Allow any punctuation before
		replace: "<atom-cardname></atom-cardname>"
		) +
	# step 3b : fill in atom fields
	tag_contents@(
		tag: "<atom-cardname>",
		contents: { "<nospellcheck>" + (if card_name=="" then "CARDNAME" else card_name) + "</nospellcheck>" }
		) +
	# step 4 : add action keyword
	replace@(
		match: lang.action_keyword + ":",
		replace: "<b-auto>&</b-auto>"
		) +
	# step 5 : curly quotes
	curly_quotes +
	# step 6 : italicize text in parenthesis
	replace@(
	 	match: "[(]([^)\n]|[(][^)\n]*[)])*[)]?",
		in_context: "(^|[[:space:]])<match>|<atom-keyword><match></",
	 	replace: "<i-auto>&</i-auto>") +
	# step 7 : automatic capitalization, but not after "("
	replace@(
		match: "([ ]*: |—| — )" # preceded by this
		     + "([[:lower:]])" # match this
		     + "(?![)])",      # not followed by this
		replace: { _1 + to_upper(_2) }) +
	# step 8 : spellcheck
	{ if set.mark_errors then
		check_spelling(
			language: lang.spellcheck_code,
			extra_dictionary: "/generic.mse-game/dictionary",
			extra_match: additional_text_words
		)
	  else input
	}

# the flavor text filter
#  - makes all text italic
flavor_text_filter :=
	# step 1 : remove italic tags
	remove_tag@(tag: "<i-flavor>")   +
	# step 2 : surround by <i> tags
	{ "<i-flavor>" + input + "</i-flavor>" } +
	# curly quotes
	curly_quotes +
	# spellcheck
	{ if set.mark_errors
	  then check_spelling(language:lang.spellcheck_code)
	  else input
	}

# Determine type of card
is_thing    := { lang.is_thing(card.super_type) }
is_action   := { lang.is_action(card.super_type) }
is_reaction := { lang.is_reaction(card.super_type) }

card_type := {
	if      is_thing()    then "thing"
	else if is_action()   then "action"
	else if is_reaction() then "reaction"
	else                       "rule"
}

# type filters
type_over_type := replace@(match:" ?[-:]$", replace:"")
space_to_comma := replace@(match:" ", replace:",")
break_subtypes := split_text@(match: " +|<atom-sep>[^<]*</atom-sep>", include_empty:false)

super_type_filter := {
	input := remove_tag(tag: "<word-list-")
	input := type_over_type()
	tag := "word-list-type"
	"<{tag}>{input}</{tag}>"
}
sub_type_filter := {
	input := remove_tag(tag: "<word-list-")
	input := remove_tag(tag: "<soft")
	# What word list to use?
	list_type := "subtype"
	if list_type != "" then (
		# wrap wordlist tag around each part
		parts := break_subtypes()
		(for each i:part in parts do
			if i == 0 then
				"<word-list-{list_type}>{part}</word-list-{list_type}>"
			else
				lang.subtype_separator + "<word-list-{list_type}>{part}</word-list-{list_type}>"
		) +
		(if length(parts) > 0 then
			# Add a new box at the end
			"<soft>{lang.subtype_separator}</soft><word-list-{list_type}></word-list-{list_type}>"
		 else
			"<word-list-{list_type}></word-list-{list_type}>"
		)
	) else input
}

# all types, for word list
all_super_types := {
	for each card in set do (
		sp := to_text(card.super_type)
		if sp != "" and not lang.is_coretype(sp) then
			"," + space_to_comma(to_text(sp))
	)
}
all_sub_types := {
	for each card in set do
		if to_text(card.super_type) != "" then "," + space_to_comma(to_text(card.sub_type))
}


############################################################## Card number
# Process the name for sorting rules
sort_name :=
	# Remove "The", "A", and "And" at the beginning
	replace@(match: "^(The|An?) ", replace: "") +
	# Remove commas and apostrophes
	replace@(match: "(,|'|’|;)", replace: "") +
	# Remove bold and italic tags
	replace@(match: "(<b>|<i>|</b>|</i>)", replace: "") +
	# Make lowercase
	to_lower

card_order_by := {
	sort_cards_by := set.sort_cards_by
	(if chosen(choice:"super type", sort_cards_by) then
		if      is_thing()    then "A"
		else if is_action()   then "B"
		else if is_reaction() then "C"
		else                  to_upper(card.super_type[0])
	) +
	(if chosen(choice:"sub type", sort_cards_by) then
		to_lower(card.sub_type)
	) +
	(if chosen(choice:"value", sort_cards_by) then
		card.value
	) +
	(if chosen(choice:"name", sort_cards_by) then
		sort_name(card.name)
	)
}

set_filter := {
	{ lang.is_coretype(to_text(card.super_type)) }
}

card_number := {
	position (
		of: card
		in: set
		order_by: { card_order_by() }
		filter: set_filter()
	) + 1
}

card_count := {
	number_of_items(in: set, filter: set_filter())
}

card_id := {
	tokens := [
		S: set.code,
		L: set.language,
		N: card_number(),
		T: card_count()
	]
	(for each part in break_text(match: ".", set.numbering) do
		tokens[part] or else part
	)
}


############################################################## Card color
card_color := {
	if not is_nil(advcfg) then
		to_color2(advcfg_get(trim(remove_tags(card.super_type + " " + card.sub_type)), def: input))
	else input
}