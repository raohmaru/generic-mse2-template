############################################################## Utility methods

# defaults args
break_text_digit  := break_text@(match: "\\d+")
match_rgb         := match@(match:"rgb")
split_lines       := split_text@(match: "\n")
split_colon       := split_text@(match: ":")

## Converts a string to a rgb value
 # input: rgb(0,0,0)
 #        named color
to_color2 := {
	if match_rgb(to_code(input)) then (
		comp := break_text_digit(input)
		rgb(comp[0], comp[1], comp[2])
	)
	# type_name is not supported thought it is in the docs
	# else if type_name == "string" then to_color(input)
	else if position(of: [to_code(input)], in: [["<card>"], [false]]) == -1 then to_color(input)
	else false
}

is_nil := {
	to_code(input) == ""
}

## Parses a multi line string of pairs of key/values
 # key1: value1
 # key2: value2
parse_kvs := {
	lines := split_lines(input)
	for each line in lines do (
		tuple := split_colon(line)
		if length(tuple) == 2 then (
			type := trim(tuple[0])
			value := trim(tuple[1])
			[[type], [value]]
		)
	)
}
advcfg := parse_kvs(set.advanced_config)

## Gets a config value for the given key
advcfg_position := position@(in: advcfg)
advcfg_get := {
	if not is_nil(advcfg) then (
		pos := advcfg_position(of: [input])
		if pos > -1 then advcfg[pos+1][0] else def
	) else def
}@(def: false)
